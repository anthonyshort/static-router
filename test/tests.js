// Generated by CoffeeScript 1.3.3
(function() {
  var Router, location;

  location = {
    host: "github.com",
    hostname: "github.com",
    href: "https://github.com/anthonyshort/static-router",
    origin: "https://github.com",
    pathname: "/anthonyshort/static-router",
    port: "",
    protocol: "https:",
    search: ""
  };

  Router = require('static-router');

  describe('Static Router', function() {
    beforeEach(function() {
      return this.router = new Router;
    });
    it('should set a url and normalize it', function() {
      var router;
      router = new Router();
      router.setUrl('/foo');
      expect(router.url).to.equal('/foo/');
      router.setUrl('foo/bar');
      expect(router.url).to.equal('/foo/bar/');
      router.setUrl('foo/');
      return expect(router.url).to.equal('/foo/');
    });
    it('should set a root url in any format and normalize it', function() {
      var router;
      router = new Router();
      router.setRoot('/foo');
      expect(router.root).to.equal('/foo/');
      router.setRoot('foo');
      expect(router.root).to.equal('/foo/');
      router.setRoot('foo/');
      return expect(router.root).to.equal('/foo/');
    });
    it('should get the fragment when there is no root set', function() {
      var router;
      router = new Router();
      router.setUrl('/foo/bar/baz');
      return expect(router.getFragment()).to.equal('/foo/bar/baz');
    });
    it('should get the fragment when there is a root set', function() {
      var router;
      router = new Router();
      router.setUrl('/foo/bar/baz');
      router.setRoot('/foo');
      return expect(router.getFragment()).to.equal('/bar/baz');
    });
    it('should add a route and match it', function() {
      var matched;
      matched = false;
      this.router.setUrl('/test/route');
      this.router.route('/test/route', function() {
        return matched = true;
      });
      return expect(matched).to.equal(true);
    });
    it('should add a route without a leading slash and not match it', function() {
      var matched;
      matched = false;
      this.router.setUrl('/test/route');
      this.router.route('test/route', function() {
        return matched = true;
      });
      return expect(matched).to.equal(false);
    });
    it('should add a route without a leading slash and a root and not match it', function() {
      var matched;
      matched = false;
      this.router.setRoot('/foo');
      this.router.setUrl('/foo/test/route');
      this.router.route('test/route', function() {
        return matched = true;
      });
      return expect(matched).to.equal(false);
    });
    it('should add a route with a root and match it', function() {
      var matched;
      matched = false;
      this.router.setRoot('/foo');
      this.router.setUrl('/foo/test/route');
      this.router.route('/test/route', function() {
        return matched = true;
      });
      return expect(matched).to.equal(true);
    });
    it('should match any route with just a wildcard', function() {
      var matched;
      matched = false;
      this.router.setUrl('/foo/test/route');
      this.router.route('*', function() {
        return matched = true;
      });
      return expect(matched).to.equal(true);
    });
    it('should add a route with params', function() {
      var matched;
      matched = false;
      this.router.setUrl('/test/foo/bar');
      this.router.route('/test/:param/:another', function(param, another) {
        matched = true;
        expect(param).to.equal('foo');
        return expect(another).to.equal('bar');
      });
      return expect(matched).to.equal(true);
    });
    return it('should add a route with wildcards', function() {
      var matched;
      matched = false;
      this.router.setUrl('/file/nested/folder/file.txt');
      this.router.route("/file/*", function(path) {
        matched = true;
        return expect(path).to.equal('nested/folder/file.txt');
      });
      return expect(matched).to.equal(true);
    });
  });

}).call(this);
